# Fluid Settings
#
# The following are basic settings for the fluid-settings environment
# Note that most settings are managed by the Fluid Settings daemon so
# here the number of settings is very minimal.

# listen=<ip>:<port>
#
# The IP address and port the fluid-settings listens on for connection
# from other fluid-settings daemons.
#
# This channel of communication is used by the fluid-settings to directly
# send messages between each others when a value has changed. This allows
# them to remain up to date between multiple computers in order to add
# stability to your cluster--i.e. if a fluid-settings service does not
# work (computer gets rebooted) the system continues to function as
# expected.
#
# Default: 127.0.0.1:4049
listen=127.0.0.1:4049


# communicatord_listen=cd:///<ip>:<port> | cd:///<path>
#
# The IP address and port or a Unix path to a socket of the communicator
# daemon used to connect.
#
# The fluid-settings daemon connects to the communicator daemon using this
# information. Once connected, all the other services can access the
# fluid-settings daemon via their local communicator daemon.
#
# Default: cd:///127.0.0.1:4040
communicatord_listen=cd:///127.0.0.1:4040


# definitions=<path1>:<path2>:...:<pathN>
#
# A list of one or more paths used to look for settings definitions.
# The files found in these directories are read on startup and once in a
# while whenever a change occurs.
#
# The definitions are used to allow a value to be set. Without it, a
# value is not accepted. The value definition can also include a validator
# which means the value has to fully validate to be accepted.
#
# The library always prepends the following two locations:
#
#     /usr/share/fluid-settings/definitions
#     /var/lib/fluid-settings/definitions
#
# which means that the definitions found in these directories always
# have priority of definitions found in user defined directories.
#
# The /var/lib/... location is useful because definitions found on other
# computers need to be accessible to your local fluid-settings. The snaprfs
# system is used to copy those definitions to your fluid-settings
# computers.
#
# Default: <empty>
#definitions=


# settings=<filename>
#
# Define the path to the location where the settings get saved. Between
# reboots, we do not want to lose the settings currently set so we save
# the data to a file in the form of a ".ini" configuration file.
#
# Note that the values include a priority and a timestamp. The priority
# gets saved as a namespace and the timestamp is the first part of the
# value separated from the value itself by a FIELD_SEPARATOR (`|` at the
# moment).
#
# Default: /var/lib/fluid-settings/settings/settings.conf
settings=/var/lib/fluid-settings/settings/settings.conf


# save_timeout=<seconds>
#
# Define a timeout between saves.
#
# Whenever a change occurs to a settings, the daemon waits a few seconds
# before saving the changes. It is done that way so we avoid many saves
# when several values get updated in a row.
#
# TODO: later versions of fluid-settings will support a BEGIN + COMMIT
#       set of messages so the save can occur only when the COMMIT is
#       received. That way the timer is not required. In most likelihood,
#       we will have only one tools allowed to tweak the settings so the
#       potential for a conflict between multiple BEGIN + COMMIT will be
#       very low.
#
# Default: 5
save_timeout=5


# gossip_timeout=<seconds>
#
# The number of seconds between FLUID_SETTINGS_GOSSIP messages. Those
# messages are broadcast to other fluid-settings over the communicator
# daemon channel.
#
# In order for the fluid-settings daemon to discover others, we use a gossip
# message. This message is sent immediately upon starting the daemon, however,
# because of the nature of a cluster, the message may get lost. By sending
# additional ones at regular intervals, we ensure we eventually are connected
# to all the fluid-settings daemons.
#
# Keep in mind that having many more messages (reducing the value to 1) is
# not a good idea. That will just make the daemon send many more gossip
# messages for no good reasons.
#
# Default: 60
gossip_timeout=60


# vim: ts=4 sw=4 et
